import telebot
import def_func as defi
from telebot import types
from telebot.util import quick_markup

# Вставь сюда токен своего бота
TOKEN = '7181713403:AAHgz_IzkydwBTvlhkQMi4WyZhxJ0cNgLG8'
Failik = 'usr.txt'
# ID канала, из которого будем пересылать сообщения
SOURCE_CHANNEL_ID = '-1002210992280'

# Предпочтения
spisok_predpochteni = ['#физика', '#математика', '#программирование', '#биология', '#химия', '#социология', '#история',
                       '#языковедение', '#география', '#педагогика', '#дизайн', '#журналистика', '#экономика',
                       '#юриспроденция', '#туризм', '#политология', '#международныеотношения', '#психология']
spisok_predpochteni_del = [spisok + '_del' for spisok in spisok_predpochteni]

# Для создание кнопок
br_reg = types.InlineKeyboardButton("Регистрация", callback_data='reg')
mark_reg = types.InlineKeyboardMarkup()
mark_reg.add(br_reg)

N_dict = defi.dict_pr(spisok_predpochteni)
N_dict['Продолжить'] = {'callback_data': 'add'}
N_dict['Закончить'] = {'callback_data': 'close'}
markup_add = quick_markup(N_dict, row_width=2)

N_dict = defi.dict_pr_dell(spisok_predpochteni_del)
N_dict['Удалить ещё'] = {'callback_data': 'del'}
N_dict['Закончить'] = {'callback_data': 'close'}
markup_delete = quick_markup(N_dict, row_width=2)

N_dict = dict()
N_dict['Закончить'] = {'callback_data': 'close'}
markup_close = quick_markup(N_dict, row_width=2)

bot = telebot.TeleBot(TOKEN)


# Начальное сообщений
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    bot.reply_to(message, 'Привет, я бот СНО Физико-технического факультета!\n\n'
                          'Я помогаю узнавать о грядущих мероприятиях и оставаться в курсе новостей.\n\n'
                          'Давай я помогу выбрать темы мероприятий, о которых я буду тебя информировать.\n\n'
                          'Для этого воспользуйтесь командой "/help" и узнайте о функционале бота.',
                 reply_markup=mark_reg)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'reg':
        user_id = callback.message.chat.id
        defi.Fwrite([str(user_id)])
        bot.reply_to(callback.message, 'Вы прошли регистрацию!')
    if callback.data == 'close':
        bot.reply_to(callback.message, 'Ждем новых сообщений !')
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

    # Добавление предпочтений
    if callback.data == 'add':
        user_id = callback.message.chat.id
        text = defi.predpoch(user_id)
        bot.reply_to(callback.message, 'Добавить предпочтения, которые вы хотите добавить\nВаши предпочтений:' + text,
                     reply_markup=markup_add)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if callback.data in spisok_predpochteni:
        user_id = callback.message.chat.id
        a = defi.Fadd(callback.data, str(user_id))
        text = defi.predpoch(user_id)
        bot.reply_to(callback.message, a + '\nВаши предпочтения: ' + text + '\nВы хотите добавить ещё?',
                     reply_markup=markup_add)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

    if callback.data == 'del':
        user_id = callback.message.chat.id
        text = defi.predpoch(user_id)
        bot.reply_to(callback.message, 'Удалить предпочтения в которых вы не хотите учавствовать\n'
                                       'Ваши предпочтений:' + text, reply_markup=markup_delete)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)

    if callback.data in spisok_predpochteni_del:
        user_id = callback.message.chat.id
        a = defi.Fremove(callback.data[:-4], str(user_id))
        text = defi.predpoch(user_id)
        if a == "Элемент отсутствует":
            bot.reply_to(callback.message, "Элемент отсутствует" + '\nВаши оставшиеся предпочтений:' + text,
                         reply_markup=markup_delete)
        else:
            bot.reply_to(callback.message,
                         'Было удаленно:' + callback.data[:-4] + '\nВаши оставшиеся предпочтений:' + text,
                         reply_markup=markup_delete)
        bot.delete_message(callback.message.chat.id, callback.message.message_id)


@bot.message_handler(commands=['help'])
def start(message: types.Message):
    bot.reply_to(message, 'Основные команды \n /help\n /add\n /delete\n /info.')


@bot.message_handler(commands=['add'])
def start(message: types.Message):
    user_id = message.chat.id
    text = defi.predpoch(user_id)
    bot.reply_to(message, 'Добавить предпочтения, которые вы хотите добавить\n '
                          'Ваши предпочтений:' + text, reply_markup=markup_add)


@bot.message_handler(commands=['delete'])
def start(message: types.Message):
    user_id = message.chat.id
    text = defi.predpoch(user_id)
    bot.reply_to(message, 'Удалить предпочтения в которых вы не хотите учавствовать\n'
                          'Ваши предпочтений:' + text, reply_markup=markup_delete)


@bot.message_handler(commands=['info'])
def start(message: types.Message):
    user_id = message.chat.id
    text = defi.predpoch(user_id)
    bot.reply_to(message, 'Ваши предпочтения: ' + text, reply_markup=markup_close)
    bot.delete_message(message.chat.id, message.message_id)


@bot.channel_post_handler(content_types=['text', 'photo', 'video', 'document', 'audio', 'voice'])
def forward_message(message: types.Message):
    if str(message.chat.id) == SOURCE_CHANNEL_ID:
        if message.text:
            text = defi.parse_text(message.text)
        else:
            text = defi.parse_text(message.caption)
        if len(text) != 0:
            registered_users = defi.Fread()
            for polzovatel in registered_users:
                if any(polzovatel[i].lower() in text for i in range(len(polzovatel))):
                    try:
                        bot.forward_message(int(polzovatel[0]), int(SOURCE_CHANNEL_ID), message.id)
                    except Exception:
                        print("ERROR")


bot.polling()
